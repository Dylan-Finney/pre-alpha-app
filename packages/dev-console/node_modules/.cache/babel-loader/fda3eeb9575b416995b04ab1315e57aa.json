{"ast":null,"code":"import _regeneratorRuntime from\"/Users/hamza/Prifina/pre-alpha-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/hamza/Prifina/pre-alpha-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/hamza/Prifina/pre-alpha-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from\"react\";import{Storage as S3Storage}from\"aws-amplify\";import{Box,Button,Text,Input}from\"@blend-ui/core\";import config from\"../config\";import{useFormFields}from\"@prifina-apps/utils\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";//import { useFormFields } from \"../lib/formFields\";\n/*\nconst userRegion = config.cognito.IDENTITY_POOL_ID.split(\":\")[0];\n\nS3Storage.configure({\n  AWSS3: {\n    bucket: config.S3.bucket + \"-\" + userRegion,\n    region: userRegion,\n    identityPoolId: config.cognito.IDENTITY_POOL_ID,\n    //identityPoolId: config.cognito.USER_IDENTITY_POOL_ID,\n  },\n});\nconsole.log(S3Storage);\n*/var UploadApp=function UploadApp(props){var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),uploaded=_useState2[0],setUploaded=_useState2[1];console.log(\"PROPS \",props);var _useFormFields=useFormFields({version:\"\"}),_useFormFields2=_slicedToArray(_useFormFields,2),appFields=_useFormFields2[0],handleChange=_useFormFields2[1];window.LOG_LEVEL=\"DEBUG\";var uploadFile=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(e){var file,s3Key,userRegion,currentCredentials,s3Status;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;file=e.target.files[0];console.log(\"Upload \",file);// check project appId is same as selected file\n// remove apps when private upload works\ns3Key=\"apps/uploaded/\"+props.row.id+\".zip\";//window.LOG_LEVEL = \"DEBUG\";\n//let metaData={ \"alt-name\": file.name };\n// amplify fails with multipart uploads... limit <5M\n//identityId?: string, // id of another user, if `level: protected`\n//const currentCredentials = await Auth.currentCredentials();\n//console.log(\"CREDS \", currentCredentials);\nuserRegion=config.cognito.USER_IDENTITY_POOL_ID.split(\":\")[0];//const _currentSession = await Auth.currentSession();\n//const currentCredentials = await cognitoCredentials(_currentSession);\ncurrentCredentials=JSON.parse(localStorage.getItem(\"PrifinaClientCredentials\"));// const s3path = `https://prifina-apps-${config.prifinaAccountId}.s3.amazonaws.com`;\nconsole.log(\"CREDS \",currentCredentials);S3Storage.configure({bucket:\"prifina-data-\".concat(config.prifinaAccountId,\"-\").concat(config.main_region),region:userRegion/*\n        identityId: currentCredentials.identityId,\n        credentials: () => {\n          return Promise.resolve(currentCredentials);\n        },\n        */});_context.next=10;return S3Storage.put(s3Key,file,{//bucket: `prifina-user-${config.prifinaAccountId}-${config.main_region}`,\n//region: userRegion,\n/*\n        bucket: \"prifina-user-352681697435-eu-west-1\",\n        region: \"eu-west-1\",\n        credentials: () => {\n          return Promise.resolve(currentCredentials);\n        }, */level:\"public\",// private doesn't work\nmetadata:{created:new Date().toISOString(),\"alt-name\":file.name},progressCallback:function progressCallback(progress){//console.log(`Uploaded: ${progress.loaded}/${progress.total}`);\nsetUploaded(\"Uploaded: \".concat(progress.loaded,\"/\").concat(progress.total));},customPrefix:{// private: \"apps/\",\n}});case 10:s3Status=_context.sent;props.close(true,appFields.version);console.log(s3Status);_context.next=18;break;case 15:_context.prev=15;_context.t0=_context[\"catch\"](0);console.log(\"OOPS \",_context.t0);case 18:case\"end\":return _context.stop();}}},_callee,null,[[0,15]]);}));return function uploadFile(_x){return _ref.apply(this,arguments);};}();return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Box,{mt:20,mb:10,children:/*#__PURE__*/_jsxs(Text,{children:[\"Upload zip file \",props.row.id,\".zip\"]})}),/*#__PURE__*/_jsx(Box,{width:\"150px\",m:10,children:/*#__PURE__*/_jsx(Input,{placeholder:\"Version\",id:\"version\",name:\"version\",onChange:handleChange})}),/*#__PURE__*/_jsx(Button,{id:\"file_upload\",name:\"file_upload\",accept:\".zip\",onChange:uploadFile,variation:\"file\",children:\"Upload file\"}),/*#__PURE__*/_jsx(Text,{ml:20,children:uploaded}),/*#__PURE__*/_jsx(Box,{mt:20,mb:10,children:/*#__PURE__*/_jsx(Button,{onClick:props.close,children:\"Back\"})})]});};UploadApp.displayName=\"UploadApp\";UploadApp.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"UploadApp\",\"props\":{\"row\":{\"type\":{\"name\":\"instanceOf\",\"value\":\"Array\"},\"required\":false,\"description\":\"\"},\"close\":{\"type\":{\"name\":\"func\"},\"required\":false,\"description\":\"\"}}};export default UploadApp;/*\nconst s3Status = await S3Storage.put(s3Key, JSON.stringify(_schema), {\n    level: \"public\",\n    contentType: \"application/json\",\n    cacheControl: \"\",\n    expires: parseInt(Date.now() / 1000),\n    metadata: { created: new Date().toISOString() },\n  });\n  console.log(s3Status);\n\n<input\n                disabled={importDisabled}\n                style={{ display: \"none\" }}\n                type=\"file\"\n                accept=\".json, .graphql\"\n                id=\"file_upload\"\n                name=\"file_upload\"\n                onChange={(e) => _importFile(e)}\n              />\n              <Button\n                disabled={importDisabled}\n                variation={\"file\"}\n                input=\"file_upload\"\n              >\n                {I18n.get(\"Import Data Model\")}\n              </Button>\n\n\nconst result = await Storage.put('test.txt', 'Private Content', {\n    level: 'private',\n    contentType: 'text/plain'\n});\n\nStorage.put('test.txt', 'File content', {\n    progressCallback(progress) {\n        console.log(`Uploaded: ${progress.loaded}/${progress.total}`);\n  },\n});\n\n*/if(typeof STORYBOOK_REACT_CLASSES!==\"undefined\"){STORYBOOK_REACT_CLASSES[\"src/components/UploadApp.js\"]={name:\"UploadApp\",docgenInfo:UploadApp.__docgenInfo,path:\"src/components/UploadApp.js\"};}","map":{"version":3,"sources":["/Users/hamza/Prifina/pre-alpha-app/packages/dev-console/src/components/UploadApp.js"],"names":["React","useState","Storage","S3Storage","Box","Button","Text","Input","config","useFormFields","UploadApp","props","uploaded","setUploaded","console","log","version","appFields","handleChange","window","LOG_LEVEL","uploadFile","e","file","target","files","s3Key","row","id","userRegion","cognito","USER_IDENTITY_POOL_ID","split","currentCredentials","JSON","parse","localStorage","getItem","configure","bucket","prifinaAccountId","main_region","region","put","level","metadata","created","Date","toISOString","name","progressCallback","progress","loaded","total","customPrefix","s3Status","close","displayName"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\n\nimport { Storage as S3Storage } from \"aws-amplify\";\n\nimport { Box, Button, Text, Input } from \"@blend-ui/core\";\nimport config from \"../config\";\nimport { useFormFields } from \"@prifina-apps/utils\";\n\nimport PropTypes from \"prop-types\";\n\n//import { useFormFields } from \"../lib/formFields\";\n/*\nconst userRegion = config.cognito.IDENTITY_POOL_ID.split(\":\")[0];\n\nS3Storage.configure({\n  AWSS3: {\n    bucket: config.S3.bucket + \"-\" + userRegion,\n    region: userRegion,\n    identityPoolId: config.cognito.IDENTITY_POOL_ID,\n    //identityPoolId: config.cognito.USER_IDENTITY_POOL_ID,\n  },\n});\nconsole.log(S3Storage);\n*/\nconst UploadApp = props => {\n  const [uploaded, setUploaded] = useState(\"\");\n  console.log(\"PROPS \", props);\n\n  const [appFields, handleChange] = useFormFields({\n    version: \"\",\n  });\n  window.LOG_LEVEL = \"DEBUG\";\n\n  const uploadFile = async e => {\n    try {\n      const file = e.target.files[0];\n\n      console.log(\"Upload \", file);\n      // check project appId is same as selected file\n      // remove apps when private upload works\n      const s3Key = \"apps/uploaded/\" + props.row.id + \".zip\";\n\n      //window.LOG_LEVEL = \"DEBUG\";\n      //let metaData={ \"alt-name\": file.name };\n      // amplify fails with multipart uploads... limit <5M\n      //identityId?: string, // id of another user, if `level: protected`\n      //const currentCredentials = await Auth.currentCredentials();\n      //console.log(\"CREDS \", currentCredentials);\n      const userRegion = config.cognito.USER_IDENTITY_POOL_ID.split(\":\")[0];\n\n      //const _currentSession = await Auth.currentSession();\n      //const currentCredentials = await cognitoCredentials(_currentSession);\n      const currentCredentials = JSON.parse(\n        localStorage.getItem(\"PrifinaClientCredentials\"),\n      );\n\n      // const s3path = `https://prifina-apps-${config.prifinaAccountId}.s3.amazonaws.com`;\n\n      console.log(\"CREDS \", currentCredentials);\n      S3Storage.configure({\n        bucket: `prifina-data-${config.prifinaAccountId}-${config.main_region}`,\n        region: userRegion,\n        /*\n        identityId: currentCredentials.identityId,\n        credentials: () => {\n          return Promise.resolve(currentCredentials);\n        },\n        */\n      });\n\n      const s3Status = await S3Storage.put(s3Key, file, {\n        //bucket: `prifina-user-${config.prifinaAccountId}-${config.main_region}`,\n        //region: userRegion,\n        /*\n        bucket: \"prifina-user-352681697435-eu-west-1\",\n        region: \"eu-west-1\",\n        credentials: () => {\n          return Promise.resolve(currentCredentials);\n        }, */\n        level: \"public\", // private doesn't work\n\n        metadata: { created: new Date().toISOString(), \"alt-name\": file.name },\n        progressCallback(progress) {\n          //console.log(`Uploaded: ${progress.loaded}/${progress.total}`);\n          setUploaded(`Uploaded: ${progress.loaded}/${progress.total}`);\n        },\n        customPrefix: {\n          // private: \"apps/\",\n        },\n      });\n      props.close(true, appFields.version);\n\n      console.log(s3Status);\n    } catch (e) {\n      console.log(\"OOPS \", e);\n    }\n  };\n\n  return (\n    <>\n      <Box mt={20} mb={10}>\n        <Text>Upload zip file {props.row.id}.zip</Text>\n      </Box>\n      <Box width={\"150px\"} m={10}>\n        <Input\n          placeholder={\"Version\"}\n          id={\"version\"}\n          name={\"version\"}\n          onChange={handleChange}\n        />\n      </Box>\n      <Button\n        id={\"file_upload\"}\n        name={\"file_upload\"}\n        accept={\".zip\"}\n        onChange={uploadFile}\n        variation={\"file\"}\n      >\n        Upload file\n      </Button>\n      <Text ml={20}>{uploaded}</Text>\n      <Box mt={20} mb={10}>\n        <Button onClick={props.close}>Back</Button>\n      </Box>\n    </>\n  );\n};\n\nUploadApp.propTypes = {\n  row: PropTypes.instanceOf(Array),\n  close: PropTypes.func,\n};\n\nUploadApp.displayName = \"UploadApp\";\nexport default UploadApp;\n\n/*\nconst s3Status = await S3Storage.put(s3Key, JSON.stringify(_schema), {\n    level: \"public\",\n    contentType: \"application/json\",\n    cacheControl: \"\",\n    expires: parseInt(Date.now() / 1000),\n    metadata: { created: new Date().toISOString() },\n  });\n  console.log(s3Status);\n\n<input\n                disabled={importDisabled}\n                style={{ display: \"none\" }}\n                type=\"file\"\n                accept=\".json, .graphql\"\n                id=\"file_upload\"\n                name=\"file_upload\"\n                onChange={(e) => _importFile(e)}\n              />\n              <Button\n                disabled={importDisabled}\n                variation={\"file\"}\n                input=\"file_upload\"\n              >\n                {I18n.get(\"Import Data Model\")}\n              </Button>\n\n\nconst result = await Storage.put('test.txt', 'Private Content', {\n    level: 'private',\n    contentType: 'text/plain'\n});\n\nStorage.put('test.txt', 'File content', {\n    progressCallback(progress) {\n        console.log(`Uploaded: ${progress.loaded}/${progress.total}`);\n  },\n});\n\n*/\n"]},"metadata":{},"sourceType":"module"}